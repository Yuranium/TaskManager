DROP TABLE IF EXISTS avatar, user_role, role, public.user CASCADE;

CREATE TABLE IF NOT EXISTS public.user(
    id_user BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    username VARCHAR(50) NOT NULL,
    name VARCHAR(50),
    last_name VARCHAR(50),
    password VARCHAR(100) NOT NULL,
    email VARCHAR(50) NOT NULL UNIQUE,
    date_registration TIMESTAMP NOT NULL DEFAULT current_timestamp,
    activity BOOLEAN NOT NULL DEFAULT FALSE::BOOLEAN
);

CREATE INDEX username_hash_idx ON public.user USING HASH(username);

CREATE TABLE IF NOT EXISTS role(
    id_role INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    role_type VARCHAR(50) NOT NULL CHECK ( role_type IN('ROLE_USER', 'ROLE_OWNER') ) DEFAULT 'ROLE_USER'
);

CREATE TABLE IF NOT EXISTS user_role(
    id_user BIGINT REFERENCES public.user(id_user) ON DELETE CASCADE ON UPDATE CASCADE,
    id_role INT REFERENCES role(id_role) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (id_user, id_role)
);

CREATE TABLE IF NOT EXISTS avatar(
     id_avatar BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
     name VARCHAR(50) NOT NULL,
     content_type VARCHAR(20) NOT NULL,
     size BIGINT NOT NULL CHECK ( size > 0 ),
     binary_data BYTEA NOT NULL,
     date_added DATE NOT NULL DEFAULT current_date,
     id_user BIGINT REFERENCES public.user(id_user)
         ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO role(role_type) VALUES ('ROLE_USER'), ('ROLE_OWNER');