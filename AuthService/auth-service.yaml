openapi: 3.0.3
info:
  title: Auth service в Task-Manager
  description: Описание эндпоинтов для сервиса аутентификации в Task Manager
  version: 1.0.0
servers:
  - url: 'http://localhost:8084'
paths:
  /auth/validate:
    post:
      tags:
        - JWT валидация
      summary: Валидация входящего JWT токена
      description: Валидация входящего JWT токена в хедерах запроса
      parameters:
        - name: Authorization
          in: header
          required: true
          description: JWT токен
          example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
          schema:
            type: string
      responses:
        '200':
          description: Токен корректный
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthValidationResponse'
        401:
          description: Токен некорректный
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthValidationResponse'
      security:
        - task_manager_auth:
            - task_manager_auth

  /auth/login:
    post:
      tags:
        - Авторизация пользователя
      summary: Авторизация пользователя в системе
      requestBody:
        description: Логин и пароль пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDto'
        required: true
      responses:
        '200':
          description: Пользователь найден в системе и успешно авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedJwt'
        401:
          description: Некорректные входные данные
          content:
            application/json:
              schema:
              # добавить
        404:
          description: Пользователь не найден в системе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedJwt'

  /auth/registration:
    post:
      tags:
        - Регистрация нового пользователя
      summary: Регистрация нового пользователя в системе
      requestBody:
        description: Данные пользователя при регистрации
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInputDto'
        required: true
      responses:
        201:
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        400:
          description: Такой пользователь уже есть в системе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse400'

  /auth/user/{id}:
    get:
      tags:
        - Получение юзера по ID
      summary: Просмотр аккаунта конкретного пользователя
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор пользователя
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          description: JWT токен
          example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
          schema:
            type: string
      responses:
        200:
          description: Пользователь есть в системе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoDto'
        401:
          description: Токен некорректный
          content:
            application/json:
              schema:
              # добавить
        404:
          description: Такого пользователя нет
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse404'
      security:
        - task_manager_auth:
            - task_manager_auth

  /auth/user/update/{id}:
    patch:
      tags:
        - Обновление данных пользователя по ID
      summary: Обновление данных профиля пользователя
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор пользователя
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          description: JWT токен
          example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
          schema:
            type: string
      requestBody:
        description: Новые данные пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDto'
        required: true
      responses:
        200:
          description: Данные пользователя успешно обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        401:
          description: Токен некорректный
          content:
            application/json:
              schema:
              # добавить
        404:
          description: Такого пользователя нет
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse404'
      security:
        - task_manager_auth:
            - task_manager_auth

  /auth/user/{id}/update-avatar:
    patch:
      tags:
        - Обновление аватара пользователя по ID
      summary: Обновление аватара пользователя и добавление к текущим аватарам
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор пользователя
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          description: JWT токен
          example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
          schema:
            type: string
      requestBody:
        description: Новая файл аватара пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultipartFile'
        required: true
      responses:
        200:
          description: Аватар пользователя успешно обновлён

        401:
          description: Токен некорректный
          content:
            application/json:
              schema:
              # добавить
        404:
          description: Такого пользователя нет
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse404'
      security:
        - task_manager_auth:
            - task_manager_auth

  /auth/user/delete/{id}:
    delete:
      tags:
        - Удаление аккаунта пользователя по ID
      summary: Удаление профиля пользователя из системы
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор пользователя
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          required: true
          description: JWT токен
          example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
          schema:
            type: string
      responses:
        204:
          description: Пользователь и все его данные успешно удалены
        401:
          description: Токен некорректный
          content:
            application/json:
              schema:
              # добавить
        404:
          description: Такого пользователя нет
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse404'
      security:
        - task_manager_auth:
            - task_manager_auth

components:
  schemas:
    AuthValidationResponse:
      type: object
      properties:
        valid:
          type: boolean
          example: true
        userId:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: example@example.com
        roles:
          type: array
          example: [ 'ROLE_USER', 'ROLE_OWNER' ]

    CreatedJwt:
      type: object
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY...'

    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: 'Yuranium'
        email:
          type: string
          example: example@example.com

    UserLoginDto:
      type: object
      properties:
        username:
          type: string
          example: example@example.com
        password:
          type: string
          example: 'myPassword'

    UserInputDto:
      type: object
      properties:
        username:
          type: string
          example: 'Yuranium'
        name:
          type: string
          example: Юрий
          required: false
        lastName:
          type: string
          example: Петров
          required: false
        password:
          type: string
          example: 'MyPassword'
          required: true
        email:
          type: string
          example: example@example.com
          required: true
        avatars:
          type: array
          example: [ { AvatarObject1 }, { AvatarObject2 }, { AvatarObject3 } ]
          required: false

    RestResponse400:
      type: object
      properties:
        code:
          type: integer
          example: 400
        status:
          type: string
          enum:
            - OK
            - BAD_REQUEST
            - I_AM_TEAPOT
            - FORBIDDEN
        timestamp:
          type: integer
          format: int64
          example: 2025-05-09T17:49:48.946
        message:
          type: string
          example: The required object field is missing

    RestResponse404:
      type: object
      properties:
        code:
          type: integer
          example: 404
        status:
          type: string
          enum:
            - OK
            - BAD_REQUEST
            - I_AM_TEAPOT
            - FORBIDDEN
        timestamp:
          type: integer
          format: int64
          example: 2025-05-09T17:49:48.946
        message:
          type: string
          example: The entity with id=1 not found

    UserInfoDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: 'Yuranium'
        name:
          type: string
          example: Юрий
          required: false
        lastName:
          type: string
          example: Петров
          required: false
        email:
          type: string
          example: example@example.com
          required: true
        dateRegistration:
          type: integer
          format: int64
          example: 2025-05-09T17:49:48.946
        activity:
          type: boolean
          example: false
        avatars:
          type: array
          example: [ { AvatarObject1 }, { AvatarObject2 }, { AvatarObject3 } ]
          required: false
        roles:
          type: array
          example: [ { RoleObject1 }, { RoleObject2 }, { RoleObject3 } ]
          required: false

    UserUpdateDto:
      type: object
      properties:
        username:
          type: string
          example: 'Yuranium'
        name:
          type: string
          example: Юрий
          required: false
        lastName:
          type: string
          example: Петров
          required: false
        avatars:
          type: array
          example: [ { AvatarObject1 }, { AvatarObject2 }, { AvatarObject3 } ]
          required: false
        roles:
          type: array
          example: [ { RoleObject1 }, { RoleObject2 }, { RoleObject3 } ]
          required: false

    MultipartFile:
      type: object
      properties:
        originalFileName:
          type: string
          example: image.png
        contentType:
          type: string
          example: image/jpeg
        binaryData:
          type: array
          example: [ 12, 13, 63, 8, 21, ... ]

  securitySchemes:
    task_manager_auth:
      type: OAuth2, JWT
      flows:
        implicit:
          authorizationUrl: http:localhost:8080/login, http:localhost:8080//oauth2/authorization/{provider}